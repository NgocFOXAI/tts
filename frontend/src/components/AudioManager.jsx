import React, { useState, useEffect, useCallback } from 'react';

import env from '../config/environment';
import './AudioManager.css';

const AudioManager = () => {
    const [files, setFiles] = useState([]);
    const [stats, setStats] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [showCleanupModal, setShowCleanupModal] = useState(false);
    const [showResultModal, setShowResultModal] = useState(false);
    const [selectedFile, setSelectedFile] = useState(null);
    const [modalMessage, setModalMessage] = useState('');
    const [resultMessage, setResultMessage] = useState('');

    const API_BASE = env.api.baseUrl;

    // Fetch files from API
    const fetchFiles = useCallback(async () => {
        try {
            setLoading(true);
            const url = `${API_BASE}/audio/files`;
            console.log('üîç Fetching files from:', url);
            const response = await fetch(url, {
                headers: {
                    'ngrok-skip-browser-warning': 'true',
                    'Accept': 'application/json'
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            setFiles(data);
            setError(null);
        } catch (err) {
            setError(`Failed to fetch files: ${err.message}`);
            console.error('Error fetching files:', err);
        } finally {
            setLoading(false);
        }
    }, [API_BASE]);

    // Fetch statistics
    const fetchStats = useCallback(async () => {
        try {
            const url = `${API_BASE}/audio/stats`;
            console.log('üîç Fetching stats from:', url);
            const response = await fetch(url, {
                headers: {
                    'ngrok-skip-browser-warning': 'true',
                    'Accept': 'application/json'
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            setStats(data);
        } catch (err) {
            console.error('Error fetching stats:', err);
        }
    }, [API_BASE]);

    // Delete a file
    const deleteFile = async (filename) => {
        setSelectedFile(filename);
        setShowDeleteModal(true);
    };

    const confirmDelete = async () => {
        if (!selectedFile) return;

        try {
            const url = `${API_BASE}/audio/files/${encodeURIComponent(selectedFile)}`;
            console.log('Deleting file:', url);
            const response = await fetch(url, {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            setShowDeleteModal(false);
            setSelectedFile(null);
            
            // Show success result
            setResultMessage(`ƒê√£ x√≥a th√†nh c√¥ng file "${selectedFile}"`);
            setShowResultModal(true);
            
            // Refresh the file list
            await fetchFiles();
            await fetchStats();
        } catch (err) {
            setShowDeleteModal(false);
            setResultMessage(`L·ªói khi x√≥a file: ${err.message}`);
            setShowResultModal(true);
        }
    };

    // Cleanup old files
    const cleanupOldFiles = async (days = 7) => {
        setShowCleanupModal(true);
    };

    const confirmCleanup = async () => {
        try {
            const url = `${API_BASE}/audio/cleanup?days=7`;
            console.log('Cleanup URL:', url);
            const response = await fetch(url, {
                method: 'POST'
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const result = await response.json();
            
            setShowCleanupModal(false);
            
            // Show result
            if (result.count > 0) {
                setResultMessage(`D·ªçn d·∫πp ho√†n t·∫•t! ƒê√£ x√≥a ${result.count} file c≈© h∆°n 7 ng√†y.`);
            } else {
                setResultMessage('Kh√¥ng c√≥ file n√†o c·∫ßn d·ªçn d·∫πp. T·∫•t c·∫£ file ƒë·ªÅu c√≤n m·ªõi.');
            }
            setShowResultModal(true);
            
            // Refresh the file list
            await fetchFiles();
            await fetchStats();
        } catch (err) {
            setShowCleanupModal(false);
            setResultMessage(`L·ªói khi d·ªçn d·∫πp: ${err.message}`);
            setShowResultModal(true);
        }
    };

    // Format file size
    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    // Format date
    const formatDate = (isoString) => {
        return new Date(isoString).toLocaleString();
    };

    useEffect(() => {
        fetchFiles();
        fetchStats();
    }, [fetchFiles, fetchStats]);

    if (loading) {
        return (
            <div className="audio-manager">
                <div className="loading">ƒêang t·∫£i th∆∞ vi·ªán √¢m thanh...</div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="audio-manager">
                <div className="error">
                    <p>L·ªói: {error}</p>
                    <button onClick={fetchFiles} className="retry-btn">
                        Th·ª≠ L·∫°i
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="audio-manager">
            {/* Delete Confirmation Modal */}
            {showDeleteModal && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h3>X√°c nh·∫≠n x√≥a file</h3>
                        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a file n√†y?</p>
                        <p className="modal-filename">"{selectedFile}"</p>
                        <p className="modal-warning">H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
                        <div className="modal-actions">
                            <button onClick={() => { setShowDeleteModal(false); setSelectedFile(null); }} className="modal-btn cancel">
                                H·ªßy
                            </button>
                            <button onClick={confirmDelete} className="modal-btn confirm">
                                X√≥a File
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Cleanup Confirmation Modal */}
            {showCleanupModal && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h3>D·ªçn d·∫πp file c≈©</h3>
                        <p>X√≥a t·∫•t c·∫£ file ƒë√£ t·ªìn t·∫°i tr√™n h·ªá th·ªëng h∆°n 7 ng√†y.</p>
                        <p className="modal-warning">H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
                        <div className="modal-actions">
                            <button onClick={() => setShowCleanupModal(false)} className="modal-btn cancel">
                                H·ªßy
                            </button>
                            <button onClick={confirmCleanup} className="modal-btn confirm">
                                X√°c nh·∫≠n d·ªçn d·∫πp
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Result Modal */}
            {showResultModal && (
                <div className="modal-overlay" onClick={() => setShowResultModal(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <h3>Th√¥ng b√°o</h3>
                        <p className="modal-result-message">{resultMessage}</p>
                        <div className="modal-actions">
                            <button onClick={() => setShowResultModal(false)} className="modal-btn confirm">
                                ƒê√≥ng
                            </button>
                        </div>
                    </div>
                </div>
            )}

            <div className="header">
                <div className="header-title">
                    <h2>Th∆∞ Vi·ªán √Çm Thanh</h2>
                    <p className="header-subtitle">Qu·∫£n l√Ω v√† t·∫£i xu·ªëng c√°c file √¢m thanh ƒë√£ t·∫°o</p>
                </div>
                <div className="actions">
                    <button onClick={fetchFiles} className="refresh-btn">
                        L√†m M·ªõi
                    </button>
                    <button onClick={() => cleanupOldFiles(7)} className="cleanup-btn">
                        D·ªçn D·∫πp (7+ ng√†y)
                    </button>
                </div>
            </div>

            <div className="stats-container">
                <div className="stat-card">
                    <div className="stat-label">T·ªïng File</div>
                    <div className="stat-value">{stats.total_files || 0}</div>
                </div>
                <div className="stat-card">
                    <div className="stat-label">File √Çm Thanh</div>
                    <div className="stat-value">{stats.audio_files || 0}</div>
                </div>
                <div className="stat-card">
                    <div className="stat-label">Dung L∆∞·ª£ng</div>
                    <div className="stat-value">{formatFileSize(stats.total_size_bytes || 0)}</div>
                </div>
            </div>

            {files.length === 0 ? (
                <div className="no-files">
                    <p>Th∆∞ vi·ªán √¢m thanh hi·ªán ƒëang tr·ªëng</p>
                    <p className="tip">C√°c file s·∫Ω xu·∫•t hi·ªán t·∫°i ƒë√¢y sau khi b·∫°n t·∫°o n·ªôi dung √¢m thanh</p>
                </div>
            ) : (
                <div className="file-list">
                    <div className="file-list-header">
                        <div className="col-name">T√™n File</div>
                        <div className="col-info">Th√¥ng Tin</div>
                        <div className="col-actions">Thao T√°c</div>
                    </div>
                    {files.map((file, index) => (
                        <div key={index} className={`file-item ${file.is_audio ? 'audio-file' : ''}`}>
                            <div className="file-name-col">
                                <strong>{file.name}</strong>
                            </div>
                            <div className="file-info-col">
                                <span className="file-size">{formatFileSize(file.size)}</span>
                                <span className="file-date">{formatDate(file.modified)}</span>
                            </div>
                            <div className="file-actions-col">
                                <a
                                    href={`${API_BASE}${file.download_url}`}
                                    download
                                    className="download-btn"
                                    title="T·∫£i xu·ªëng"
                                >
                                    T·∫£i Xu·ªëng
                                </a>
                                {file.is_audio && (
                                    <audio controls className="audio-player">
                                        <source src={`${API_BASE}${file.download_url}`} type={file.mime_type} />
                                        Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£
                                    </audio>
                                )}
                                <button
                                    onClick={() => deleteFile(file.name)}
                                    className="delete-btn"
                                    title="X√≥a file"
                                >
                                    X√≥a
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default AudioManager;